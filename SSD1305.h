#include "Board.h"
#include "String.h"
#include <stdio.h>

/* Pin driver handle */
static PIN_Handle PinHandle;
static PIN_State PinState;
unsigned char Data_BUS;

#define SPI_CS  IOID_20
#define SPI_DC  IOID_9
#define IC_RST IOID_13
#define SPI_SDA IOID_14
#define SPI_SCK IOID_10
#define LED_RED IOID_6
#define LED_GREEN IOID_7

PIN_Config PinTable[] = {

                         SPI_CS       | PIN_GPIO_OUTPUT_EN | PIN_GPIO_LOW | PIN_PUSHPULL | PIN_DRVSTR_MAX,
                         IC_RST       | PIN_GPIO_OUTPUT_EN | PIN_GPIO_LOW | PIN_PUSHPULL | PIN_DRVSTR_MAX,
                         SPI_DC       | PIN_GPIO_OUTPUT_EN | PIN_GPIO_LOW | PIN_PUSHPULL | PIN_DRVSTR_MAX,
                         SPI_SDA      | PIN_GPIO_OUTPUT_EN | PIN_GPIO_LOW | PIN_PUSHPULL | PIN_DRVSTR_MAX,
                         SPI_SCK      | PIN_GPIO_OUTPUT_EN | PIN_GPIO_LOW | PIN_PUSHPULL | PIN_DRVSTR_MAX,
                         LED_RED      | PIN_GPIO_OUTPUT_EN | PIN_GPIO_LOW | PIN_PUSHPULL | PIN_DRVSTR_MAX,
                         LED_GREEN    | PIN_GPIO_OUTPUT_EN | PIN_GPIO_LOW | PIN_PUSHPULL | PIN_DRVSTR_MAX,
    PIN_TERMINATE
};


#define WIDTH 128
#define HEIGHT 64


#define BLACK 0
#define WHITE 1

#define SSD1305_SETLOWCOLUMN 0x00
#define SSD1305_SETHIGHCOLUMN 0x10
#define SSD1305_MEMORYMODE 0x20
#define SSD1305_SETCOLADDR 0x21
#define SSD1305_SETPAGEADDR 0x22
#define SSD1305_SETSTARTLINE 0x40

#define SSD1305_SETCONTRAST 0x81
#define SSD1305_SETBRIGHTNESS 0x82

#define SSD1305_SETLUT 0x91

#define SSD1305_SEGREMAP 0xA0
#define SSD1305_DISPLAYALLON_RESUME 0xA4
#define SSD1305_DISPLAYALLON 0xA5
#define SSD1305_NORMALDISPLAY 0xA6
#define SSD1305_INVERTDISPLAY 0xA7
#define SSD1305_SETMULTIPLEX 0xA8
#define SSD1305_DISPLAYDIM 0xAC
#define SSD1305_MASTERCONFIG 0xAD
#define SSD1305_DISPLAYOFF 0xAE
#define SSD1305_DISPLAYON 0xAF

#define SSD1305_SETPAGESTART 0xB0

#define SSD1305_COMSCANINC 0xC0
#define SSD1305_COMSCANDEC 0xC8
#define SSD1305_SETDISPLAYOFFSET 0xD3
#define SSD1305_SETDISPLAYCLOCKDIV 0xD5
#define SSD1305_SETAREACOLOR 0xD8
#define SSD1305_SETPRECHARGE 0xD9
#define SSD1305_SETCOMPINS 0xDA
#define SSD1305_SETVCOMLEVEL 0xDB

#define SSD1305_ENTERREADMODIFYWRITEMODE 0xE0
#define SSD1305_NOP 0xE3

#define GRAYOLED_SETCONTRAST 0x81   ///< Generic contrast for almost all OLEDs
#define GRAYOLED_NORMALDISPLAY 0xA6 ///< Generic non-invert for almost all OLEDs
#define GRAYOLED_INVERTDISPLAY 0xA7 ///< Generic invert for almost all OLEDs



#define MONOOLED_BLACK 0   ///< Default black 'color' for monochrome OLEDS
#define MONOOLED_WHITE 1   ///< Default white 'color' for monochrome OLEDS
#define MONOOLED_INVERSE 2 ///< Default inversion command for monochrome OLEDS

uint8_t buffer[WIDTH][HEIGHT]; ///< Internal 1:1 framebuffer of display mem

//uint8_t buffer[8][2]={r0c0,c1,
//                     r1c0,r1c1,
//                     r2c0,r2c1,
//                     r3c0,r3c1,
//                     r4c0,r4c1,
//                     r5c0,r5c1,
//                     r6c0,r6c1,
//                     r7c0,r7c1
//}

static const uint8_t Font[255][5] = {
  0x00, 0x00, 0x00, 0x00, 0x00,
  0x3E, 0x5B, 0x4F, 0x5B, 0x3E,
  0x3E, 0x6B, 0x4F, 0x6B, 0x3E,
  0x1C, 0x3E, 0x7C, 0x3E, 0x1C,
  0x18, 0x3C, 0x7E, 0x3C, 0x18,
  0x1C, 0x57, 0x7D, 0x57, 0x1C,
  0x1C, 0x5E, 0x7F, 0x5E, 0x1C,
  0x00, 0x18, 0x3C, 0x18, 0x00,
  0xFF, 0xE7, 0xC3, 0xE7, 0xFF,
  0x00, 0x18, 0x24, 0x18, 0x00,
  0xFF, 0xE7, 0xDB, 0xE7, 0xFF,
  0x30, 0x48, 0x3A, 0x06, 0x0E,
  0x26, 0x29, 0x79, 0x29, 0x26,
  0x40, 0x7F, 0x05, 0x05, 0x07,
  0x40, 0x7F, 0x05, 0x25, 0x3F,
  0x5A, 0x3C, 0xE7, 0x3C, 0x5A,
  0x7F, 0x3E, 0x1C, 0x1C, 0x08,
  0x08, 0x1C, 0x1C, 0x3E, 0x7F,
  0x14, 0x22, 0x7F, 0x22, 0x14,
  0x5F, 0x5F, 0x00, 0x5F, 0x5F,
  0x06, 0x09, 0x7F, 0x01, 0x7F,
  0x00, 0x66, 0x89, 0x95, 0x6A,
  0x60, 0x60, 0x60, 0x60, 0x60,
  0x94, 0xA2, 0xFF, 0xA2, 0x94,
  0x08, 0x04, 0x7E, 0x04, 0x08,
  0x10, 0x20, 0x7E, 0x20, 0x10,
  0x08, 0x08, 0x2A, 0x1C, 0x08,
  0x08, 0x1C, 0x2A, 0x08, 0x08,
  0x1E, 0x10, 0x10, 0x10, 0x10,
  0x0C, 0x1E, 0x0C, 0x1E, 0x0C,
  0x30, 0x38, 0x3E, 0x38, 0x30,
  0x06, 0x0E, 0x3E, 0x0E, 0x06,
  0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x5F, 0x00, 0x00,
  0x00, 0x07, 0x00, 0x07, 0x00,
  0x14, 0x7F, 0x14, 0x7F, 0x14,
  0x24, 0x2A, 0x7F, 0x2A, 0x12,
  0x23, 0x13, 0x08, 0x64, 0x62,
  0x36, 0x49, 0x56, 0x20, 0x50,
  0x00, 0x08, 0x07, 0x03, 0x00,
  0x00, 0x1C, 0x22, 0x41, 0x00,
  0x00, 0x41, 0x22, 0x1C, 0x00,
  0x2A, 0x1C, 0x7F, 0x1C, 0x2A,
  0x08, 0x08, 0x3E, 0x08, 0x08,
  0x00, 0x80, 0x70, 0x30, 0x00,
  0x08, 0x08, 0x08, 0x08, 0x08,
  0x00, 0x00, 0x60, 0x60, 0x00,
  0x20, 0x10, 0x08, 0x04, 0x02,
  0x3E, 0x51, 0x49, 0x45, 0x3E, // 0 - 48
  0x00, 0x42, 0x7F, 0x40, 0x00, // 1
  0x72, 0x49, 0x49, 0x49, 0x46, // 2
  0x21, 0x41, 0x49, 0x4D, 0x33, // 3
  0x18, 0x14, 0x12, 0x7F, 0x10, // 4
  0x27, 0x45, 0x45, 0x45, 0x39, // 5
  0x3C, 0x4A, 0x49, 0x49, 0x31, // 6
  0x41, 0x21, 0x11, 0x09, 0x07, // 7
  0x36, 0x49, 0x49, 0x49, 0x36, // 8
  0x46, 0x49, 0x49, 0x29, 0x1E, // 9
  0x00, 0x00, 0x14, 0x00, 0x00,
  0x00, 0x40, 0x34, 0x00, 0x00,
  0x00, 0x08, 0x14, 0x22, 0x41,
  0x14, 0x14, 0x14, 0x14, 0x14,
  0x00, 0x41, 0x22, 0x14, 0x08,
  0x02, 0x01, 0x59, 0x09, 0x06,
  0x3E, 0x41, 0x5D, 0x59, 0x4E,
  0x7C, 0x12, 0x11, 0x12, 0x7C, // A - 65
  0x7F, 0x49, 0x49, 0x49, 0x36, // B
  0x3E, 0x41, 0x41, 0x41, 0x22, // C
  0x7F, 0x41, 0x41, 0x41, 0x3E, // D
  0x7F, 0x49, 0x49, 0x49, 0x41, // E
  0x7F, 0x09, 0x09, 0x09, 0x01, // F
  0x3E, 0x41, 0x41, 0x51, 0x73, // G
  0x7F, 0x08, 0x08, 0x08, 0x7F, // H
  0x00, 0x41, 0x7F, 0x41, 0x00, // I
  0x20, 0x40, 0x41, 0x3F, 0x01, // J
  0x7F, 0x08, 0x14, 0x22, 0x41, // K
  0x7F, 0x40, 0x40, 0x40, 0x40, // L
  0x7F, 0x02, 0x1C, 0x02, 0x7F, // M
  0x7F, 0x04, 0x08, 0x10, 0x7F, // N
  0x3E, 0x41, 0x41, 0x41, 0x3E, // O
  0x7F, 0x09, 0x09, 0x09, 0x06, // P
  0x3E, 0x41, 0x51, 0x21, 0x5E, // Q
  0x7F, 0x09, 0x19, 0x29, 0x46, // R
  0x26, 0x49, 0x49, 0x49, 0x32, // S
  0x03, 0x01, 0x7F, 0x01, 0x03, // T
  0x3F, 0x40, 0x40, 0x40, 0x3F, // U
  0x1F, 0x20, 0x40, 0x20, 0x1F, // V
  0x3F, 0x40, 0x38, 0x40, 0x3F, // W
  0x63, 0x14, 0x08, 0x14, 0x63, // X
  0x03, 0x04, 0x78, 0x04, 0x03, // Y
  0x61, 0x59, 0x49, 0x4D, 0x43, // Z
  0x00, 0x7F, 0x41, 0x41, 0x41,
  0x02, 0x04, 0x08, 0x10, 0x20,
  0x00, 0x41, 0x41, 0x41, 0x7F,
  0x04, 0x02, 0x01, 0x02, 0x04,
  0x40, 0x40, 0x40, 0x40, 0x40,
  0x00, 0x03, 0x07, 0x08, 0x00,
  0x20, 0x54, 0x54, 0x78, 0x40, // a
  0x7F, 0x28, 0x44, 0x44, 0x38, // b
  0x38, 0x44, 0x44, 0x44, 0x28, // c
  0x38, 0x44, 0x44, 0x28, 0x7F, // d
  0x38, 0x54, 0x54, 0x54, 0x18, // e
  0x00, 0x08, 0x7E, 0x09, 0x02, // f
  0x18, 0xA4, 0xA4, 0x9C, 0x78, // g
  0x7F, 0x08, 0x04, 0x04, 0x78, // h
  0x00, 0x44, 0x7D, 0x40, 0x00, // i
  0x20, 0x40, 0x40, 0x3D, 0x00, // j
  0x7F, 0x10, 0x28, 0x44, 0x00, // k
  0x00, 0x41, 0x7F, 0x40, 0x00, // l
  0x7C, 0x04, 0x78, 0x04, 0x78, // m
  0x7C, 0x08, 0x04, 0x04, 0x78, // n
  0x38, 0x44, 0x44, 0x44, 0x38, // o
  0xFC, 0x18, 0x24, 0x24, 0x18, // p
  0x18, 0x24, 0x24, 0x18, 0xFC, // q
  0x7C, 0x08, 0x04, 0x04, 0x08, // r
  0x48, 0x54, 0x54, 0x54, 0x24, // s
  0x04, 0x04, 0x3F, 0x44, 0x24, // t
  0x3C, 0x40, 0x40, 0x20, 0x7C, // u
  0x1C, 0x20, 0x40, 0x20, 0x1C, // v
  0x3C, 0x40, 0x30, 0x40, 0x3C, // w
  0x44, 0x28, 0x10, 0x28, 0x44, // x
  0x4C, 0x90, 0x90, 0x90, 0x7C, // y
  0x44, 0x64, 0x54, 0x4C, 0x44, // z
  0x00, 0x08, 0x36, 0x41, 0x00,
  0x00, 0x00, 0x77, 0x00, 0x00,
  0x00, 0x41, 0x36, 0x08, 0x00,
  0x02, 0x01, 0x02, 0x04, 0x02,
  0x3C, 0x26, 0x23, 0x26, 0x3C,
  0x1E, 0xA1, 0xA1, 0x61, 0x12,
  0x3A, 0x40, 0x40, 0x20, 0x7A,
  0x38, 0x54, 0x54, 0x55, 0x59,
  0x21, 0x55, 0x55, 0x79, 0x41,
  0x21, 0x54, 0x54, 0x78, 0x41,
  0x21, 0x55, 0x54, 0x78, 0x40,
  0x20, 0x54, 0x55, 0x79, 0x40,
  0x0C, 0x1E, 0x52, 0x72, 0x12,
  0x39, 0x55, 0x55, 0x55, 0x59,
  0x39, 0x54, 0x54, 0x54, 0x59,
  0x39, 0x55, 0x54, 0x54, 0x58,
  0x00, 0x00, 0x45, 0x7C, 0x41,
  0x00, 0x02, 0x45, 0x7D, 0x42,
  0x00, 0x01, 0x45, 0x7C, 0x40,
  0xF0, 0x29, 0x24, 0x29, 0xF0,
  0xF0, 0x28, 0x25, 0x28, 0xF0,
  0x7C, 0x54, 0x55, 0x45, 0x00,
  0x20, 0x54, 0x54, 0x7C, 0x54,
  0x7C, 0x0A, 0x09, 0x7F, 0x49,
  0x32, 0x49, 0x49, 0x49, 0x32,
  0x32, 0x48, 0x48, 0x48, 0x32,
  0x32, 0x4A, 0x48, 0x48, 0x30,
  0x3A, 0x41, 0x41, 0x21, 0x7A,
  0x3A, 0x42, 0x40, 0x20, 0x78,
  0x00, 0x9D, 0xA0, 0xA0, 0x7D,
  0x39, 0x44, 0x44, 0x44, 0x39,
  0x3D, 0x40, 0x40, 0x40, 0x3D,
  0x3C, 0x24, 0xFF, 0x24, 0x24,
  0x48, 0x7E, 0x49, 0x43, 0x66,
  0x2B, 0x2F, 0xFC, 0x2F, 0x2B,
  0xFF, 0x09, 0x29, 0xF6, 0x20,
  0xC0, 0x88, 0x7E, 0x09, 0x03,
  0x20, 0x54, 0x54, 0x79, 0x41,
  0x00, 0x00, 0x44, 0x7D, 0x41,
  0x30, 0x48, 0x48, 0x4A, 0x32,
  0x38, 0x40, 0x40, 0x22, 0x7A,
  0x00, 0x7A, 0x0A, 0x0A, 0x72,
  0x7D, 0x0D, 0x19, 0x31, 0x7D,
  0x26, 0x29, 0x29, 0x2F, 0x28,
  0x26, 0x29, 0x29, 0x29, 0x26,
  0x30, 0x48, 0x4D, 0x40, 0x20,
  0x38, 0x08, 0x08, 0x08, 0x08,
  0x08, 0x08, 0x08, 0x08, 0x38,
  0x2F, 0x10, 0xC8, 0xAC, 0xBA,
  0x2F, 0x10, 0x28, 0x34, 0xFA,
  0x00, 0x00, 0x7B, 0x00, 0x00,
  0x08, 0x14, 0x2A, 0x14, 0x22,
  0x22, 0x14, 0x2A, 0x14, 0x08,
  0xAA, 0x00, 0x55, 0x00, 0xAA,
  0xAA, 0x55, 0xAA, 0x55, 0xAA,
  0x00, 0x00, 0x00, 0xFF, 0x00,
  0x10, 0x10, 0x10, 0xFF, 0x00,
  0x14, 0x14, 0x14, 0xFF, 0x00,
  0x10, 0x10, 0xFF, 0x00, 0xFF,
  0x10, 0x10, 0xF0, 0x10, 0xF0,
  0x14, 0x14, 0x14, 0xFC, 0x00,
  0x14, 0x14, 0xF7, 0x00, 0xFF,
  0x00, 0x00, 0xFF, 0x00, 0xFF,
  0x14, 0x14, 0xF4, 0x04, 0xFC,
  0x14, 0x14, 0x17, 0x10, 0x1F,
  0x10, 0x10, 0x1F, 0x10, 0x1F,
  0x14, 0x14, 0x14, 0x1F, 0x00,
  0x10, 0x10, 0x10, 0xF0, 0x00,
  0x00, 0x00, 0x00, 0x1F, 0x10,
  0x10, 0x10, 0x10, 0x1F, 0x10,
  0x10, 0x10, 0x10, 0xF0, 0x10,
  0x00, 0x00, 0x00, 0xFF, 0x10,
  0x10, 0x10, 0x10, 0x10, 0x10,
  0x10, 0x10, 0x10, 0xFF, 0x10,
  0x00, 0x00, 0x00, 0xFF, 0x14,
  0x00, 0x00, 0xFF, 0x00, 0xFF,
  0x00, 0x00, 0x1F, 0x10, 0x17,
  0x00, 0x00, 0xFC, 0x04, 0xF4,
  0x14, 0x14, 0x17, 0x10, 0x17,
  0x14, 0x14, 0xF4, 0x04, 0xF4,
  0x00, 0x00, 0xFF, 0x00, 0xF7,
  0x14, 0x14, 0x14, 0x14, 0x14,
  0x14, 0x14, 0xF7, 0x00, 0xF7,
  0x14, 0x14, 0x14, 0x17, 0x14,
  0x10, 0x10, 0x1F, 0x10, 0x1F,
  0x14, 0x14, 0x14, 0xF4, 0x14,
  0x10, 0x10, 0xF0, 0x10, 0xF0,
  0x00, 0x00, 0x1F, 0x10, 0x1F,
  0x00, 0x00, 0x00, 0x1F, 0x14,
  0x00, 0x00, 0x00, 0xFC, 0x14,
  0x00, 0x00, 0xF0, 0x10, 0xF0,
  0x10, 0x10, 0xFF, 0x10, 0xFF,
  0x14, 0x14, 0x14, 0xFF, 0x14,
  0x10, 0x10, 0x10, 0x1F, 0x00,
  0x00, 0x00, 0x00, 0xF0, 0x10,
  0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
  0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
  0xFF, 0xFF, 0xFF, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xFF, 0xFF,
  0x0F, 0x0F, 0x0F, 0x0F, 0x0F,
  0x38, 0x44, 0x44, 0x38, 0x44,
  0x7C, 0x2A, 0x2A, 0x3E, 0x14,
  0x7E, 0x02, 0x02, 0x06, 0x06,
  0x02, 0x7E, 0x02, 0x7E, 0x02,
  0x63, 0x55, 0x49, 0x41, 0x63,
  0x38, 0x44, 0x44, 0x3C, 0x04,
  0x40, 0x7E, 0x20, 0x1E, 0x20,
  0x06, 0x02, 0x7E, 0x02, 0x02,
  0x99, 0xA5, 0xE7, 0xA5, 0x99,
  0x1C, 0x2A, 0x49, 0x2A, 0x1C,
  0x4C, 0x72, 0x01, 0x72, 0x4C,
  0x30, 0x4A, 0x4D, 0x4D, 0x30,
  0x30, 0x48, 0x78, 0x48, 0x30,
  0xBC, 0x62, 0x5A, 0x46, 0x3D,
  0x3E, 0x49, 0x49, 0x49, 0x00,
  0x7E, 0x01, 0x01, 0x01, 0x7E,
  0x2A, 0x2A, 0x2A, 0x2A, 0x2A,
  0x44, 0x44, 0x5F, 0x44, 0x44,
  0x40, 0x51, 0x4A, 0x44, 0x40,
  0x40, 0x44, 0x4A, 0x51, 0x40,
  0x00, 0x00, 0xFF, 0x01, 0x03,
  0xE0, 0x80, 0xFF, 0x00, 0x00,
  0x08, 0x08, 0x6B, 0x6B, 0x08,
  0x36, 0x12, 0x36, 0x24, 0x36,
  0x06, 0x0F, 0x09, 0x0F, 0x06,
  0x00, 0x00, 0x18, 0x18, 0x00,
  0x00, 0x00, 0x10, 0x10, 0x00,
  0x30, 0x40, 0xFF, 0x01, 0x01,
  0x00, 0x1F, 0x01, 0x01, 0x1E,
  0x00, 0x19, 0x1D, 0x17, 0x12,
  0x00, 0x3C, 0x3C, 0x3C, 0x3C,
  0x00, 0x00, 0x00, 0x00, 0x00,
};

void delay(uint64_t delay_value)
{
    while(delay_value!=0)
    delay_value--;
}

void delay1(uint64_t delay_value)
{
    unsigned int i,j;

    for(i=0;i<=delay_value;i++)
    {
        for(j=0;j<=delay_value;j++)
        {}
    }
}

void SPItransfer(unsigned char dat)
{
    unsigned char i;
    for(i=0;i<8;i++)
    {
        if((dat)&0x80>>i)
        {
            PIN_setOutputValue(PinHandle, SPI_SDA,1);
        }
        else
        {
            PIN_setOutputValue(PinHandle, SPI_SDA,0);
        }
        delay(1);
        PIN_setOutputValue(PinHandle, SPI_SCK,1);
        delay(1);
        PIN_setOutputValue(PinHandle, SPI_SCK,0);
    }

}

void command(uint8_t cmd)
{
    PIN_setOutputValue(PinHandle, SPI_DC,0);
    SPItransfer(cmd);
}

void data(uint8_t cmd)
{
    PIN_setOutputValue(PinHandle, SPI_DC,1);
    SPItransfer(cmd);
}

void setContrast(unsigned char level)
{
    SPItransfer(GRAYOLED_SETCONTRAST);
    SPItransfer(level);
}

void oledInit()
{
    PinHandle = PIN_open(&PinState, PinTable);
    PIN_setOutputValue(PinHandle, SPI_CS,0);
    PIN_setOutputValue(PinHandle, IC_RST,1);
    delay(10);
    PIN_setOutputValue(PinHandle, IC_RST,0);
    delay(10);
    PIN_setOutputValue(PinHandle, IC_RST,1);

    command(SSD1305_DISPLAYOFF);
    command(SSD1305_MEMORYMODE);
    command(0x00);
    command(SSD1305_SETCONTRAST);
    command(0xFF);// 0x81, 0x32
    command(SSD1305_SETBRIGHTNESS);
    command(0x80);// 0x82, 0x80
    command(SSD1305_SEGREMAP | 0x01);
    command(SSD1305_NORMALDISPLAY);
    command(SSD1305_SETMULTIPLEX);
    command(0x3F);// 0xA8, 0x3F (1/64)
    command(SSD1305_MASTERCONFIG);
    command(0x8E);/* external vcc supply */
    command(SSD1305_COMSCANDEC);//SSD1305_COMSCANINC
    command(SSD1305_SETDISPLAYOFFSET);
    command(0x40);// 0xD3, 0x3F
    command(SSD1305_SETDISPLAYCLOCKDIV);
    command(0xF0);// 0xD5, 0xF0
    command(SSD1305_SETAREACOLOR & 0xC8);
    command(0x05);
    command(SSD1305_SETCOMPINS);
    command(0x12);// 0xDA, 0x12
    command(SSD1305_SETLUT);
    command(0x3F);
    command(0x3F);
    command(0x3F);
    command(0x3F);
    delay(100);
    command(SSD1305_DISPLAYON);
    setContrast(0x01);
}

void cmd_inverseDisplay()
{
    command(0xA7);
}

void cmd_normalDisplay()
{
    command(0xA6);
}

void scrool()
{
    command(0x2F);
    command(0x26);
    command(0x27);
    command(0x29);
    command(0x2A);
    delay(10000);
    command(0x2F);
    command(0x26);
    command(0x27);
}

void exampleOfDisplay(uint8_t startX, uint8_t startY, uint8_t finishX, uint8_t finishY)
{
    int i;
    if (startX>127) startX=127;
    if (finishX>127) finishX=127;

    if (startY>63) startX=63;
    if (finishY>63) finishX=63;


    for(i=startX; i <finishX; i++)
    {
        command(SSD1305_SETCOLADDR);
        command(i);//start column
        command(i);//finish column
        data(0b01111111);
        data(0b00111111);
        data(0b00011111);
        data(0b0001111);
        data(0b11110000);
        data(0b11111000);
        data(0b11111100);
        data(0b11111110);
    }
}

void clearDisplay()
{
    int i,j;
    for(i=0;i<128;i++)
    {
        command(SSD1305_SETCOLADDR);
        command(i);//start column
        command(i);//finish column
        for(j=0;j<8;j++)
        {
            data(0x00);
        }
    }
}

void displayBuffer()
{
    int i,j;
    for(i=0;i<WIDTH;i++)
        //for(i=0;i<WIDTH;i++)
    {
        command(SSD1305_SETCOLADDR);
        command(i);//start column
        command(i);//finish column
        for(j=HEIGHT-1;j>0;j=j-8)
        //for(j=0;j<HEIGHT;j=j+8)
        {
            data((buffer[127-i][j])+(buffer[127-i][j-1]<<1) +(buffer[127-i][j-2]<<2)+(buffer[127-i][j-3]<<3)+(buffer[127-i][j-4]<<4)+(buffer[127-i][j-5]<<5)+(buffer[127-i][j-6]<<6)+(buffer[127-i][j-7]<<7));
        }
    }

///////////////////////////////////////////////THE DISPLAY's REAL COORDINATE /////////////////////////////////
//    int i,j;
//    for(i=0;i<WIDTH;i++)
//        //for(i=0;i<WIDTH;i++)
//    {
//        command(SSD1305_SETCOLADDR);
//        command(i);//start column
//        command(i);//finish column
//        for(j=0;j<HEIGHT;j=j+8)
//        {
//            data((buffer[i][j+8]<<7)+(buffer[i][j+7]<<6) +(buffer[i][j+6]<<5)+(buffer[i][j+5]<<4)+(buffer[i][j+4]<<3)+(buffer[i][j+3]<<2)+(buffer[i][j+2]<<1)+(buffer[i][j+1]));
//        }
//    }

}

void drawLine(uint8_t startX, uint8_t startY, uint8_t finishX, uint8_t finishY)
{
    float slope;
    float temp;
    int i,j;

    if(finishX>128 || finishY>64 )
        return;


    if(startX==finishX)
        for(j=startY;j<finishY;j++)
        {
            buffer[startX][j]=1;
        }
    else if(startY==finishY)
        for(i=startX;i<finishX;i++)
        {
            buffer[i][startY]=1;
        }
    else
    {//this part doesn't work
        slope= ((float)finishY-(float)startY) / ((float)finishX-(float)startX);
        buffer[startX][startY]=1;
        buffer[finishX][finishY]=1;

        for(i=startX;i<finishX+1;i++)
        {
            for(j=startY;j<finishY+1;j++)
            {
                temp=(float)i*slope;
                if(((int)temp)==((int)j))
                {
                    buffer[i][j]=1;
                }
            }
        }
    }
}

void drawFont(uint8_t x, uint8_t y, char character)
{
    int i,j;
    if ((x > 128) || (y > 64))
      return;

    for(i=x;i<x+5;i++)
    {
        for(j=y;j<y+1;j++)
        {
            buffer[i][j+0]=(Font[character][i-x]>>0)&0x01;
            buffer[i][j+1]=(Font[character][i-x]>>1)&0x01;
            buffer[i][j+2]=(Font[character][i-x]>>2)&0x01;
            buffer[i][j+3]=(Font[character][i-x]>>3)&0x01;
            buffer[i][j+4]=(Font[character][i-x]>>4)&0x01;
            buffer[i][j+5]=(Font[character][i-x]>>5)&0x01;
            buffer[i][j+6]=(Font[character][i-x]>>6)&0x01;
            buffer[i][j+7]=(Font[character][i-x]>>7)&0x01;
        }
    }
}

void drawString(uint8_t x, uint8_t y, char character[])
{
    int i=0;
    while (character[i]!='\0')
    {
        drawFont(x+(i*7),y,character[i]);
        i++;
    }
    displayBuffer();
}

void drawNumber(uint8_t x, uint8_t y, int64_t number)
{
    char temp[10];
    sprintf(temp, "%d", number);
    drawString(x,y,temp);

}
